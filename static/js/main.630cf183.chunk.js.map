{"version":3,"sources":["components/Header/Header.js","components/About/About.js","components/ProjectItem/ProjectItem.js","data/projectsData.js","containers/Projects.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","About","ProjectItem","title","liveUrl","repo","technology","description","extra","href","projectsData","Projects","projectNodes","map","project","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAGqBA,G,sLAEjB,OACE,yBAAKC,UAAU,UACb,yCACA,2F,GAL4BC,cCDfC,E,iLAEjB,OACE,yBAAKF,UAAU,SACb,oU,GAJ2BC,aCepBE,EAbK,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACpE,OACE,yBAAKT,UAAU,gBACb,wBAAIA,UAAU,SAAd,IAAwBI,EAAxB,KACA,uBAAGJ,UAAU,UAAUU,KAAML,GAA7B,YAFF,IAEqD,4BACnD,uBAAGL,UAAU,OAAOU,KAAMJ,GAA1B,cACA,uBAAGN,UAAU,cAAb,IAA4BO,EAA5B,KACA,uBAAGP,UAAU,eAAb,IAA6BQ,EAA7B,KACA,0BAAMR,UAAU,SAAhB,IAA0BS,EAA1B,OCeSE,EA3BM,CACnB,CACEP,MAAO,4BACPC,QAAS,2DACTC,KAAM,2DACNC,WAAY,wBACZC,YAAa,qKACbC,MAAO,IAET,CACEL,MAAO,uBACPC,QAAS,uCACTC,KAAM,+DACNC,WAAY,6BACZC,YAAa,oJACbC,MAAO,IAET,CACEL,MAAO,YACPC,QAAS,kBACTC,KAAM,yDACNC,WAAY,sCACZC,YAAa,mFACbC,MAAO,qHCEIG,EApBE,WACf,IAAMC,EAAeF,EAAaG,KAAI,SAAAC,GACpC,OAAO,kBAAC,EAAgBA,MAW1B,OACE,yBAAKf,UAAU,YACZa,IClBcG,E,iLAEjB,OACE,yBAAKhB,UAAU,UACb,2DAGA,uBAAGU,KAAK,kCAAR,WACA,uBAAGA,KAAK,0CAAR,aACA,uBAAGA,KAAK,uCAAR,mB,GAT4BT,aCMfgB,E,iLAEjB,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,4BACA,kBAAC,EAAD,yBACA,kBAAC,EAAD,4BACA,kBAAC,EAAD,gC,GAPyBC,aCIbiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.630cf183.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../App/App.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className='Header'>\n        <h1>Eli Zevin</h1>\n        <span>Software Developer - Jazz Musician - Cannabis Farmer</span>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div className='About'>\n        <p>Full Stack Software Developer, enthused to work in whatever language/technology is necessary. Jazz musician, spontaneous musical problem-solving while maintaining soul. Second generation Cannabis Farmer born into the trade in the heart of the industry, with a love for everything natural.</p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport '../App/App.css';\n\n\nconst ProjectItem = ({ title, liveUrl, repo, technology, description, extra }) => {\n  return (\n    <div className='Project-Item'>\n      <h3 className='Title'> {title} </h3>\n      <a className='LiveUrl' href={liveUrl}>Live Url</a> <n/>\n      <a className='Repo' href={repo}>Repository</a>\n      <p className='Technology'> {technology} </p>\n      <p className='Description'> {description} </p>\n      <span className='Extra'> {extra} </span>\n    </div>\n  );\n};\n\nexport default ProjectItem;\n","const projectsData = [\n  {\n    title: 'Chinese Alphabet Learning',\n    liveUrl: 'https://dizzyjaguar.github.io/chinese-alphabet-learning/',\n    repo: 'https://github.com/dizzyjaguar/chinese-alphabet-learning',\n    technology: 'Javascript, HTML, CSS',\n    description: 'This was a group project in Bootcamp. We mostly mob-programmed the whole thing.  This was created in a week long sprint, and only created with Vanilla Javascript.',\n    extra: '',\n  },\n  {\n    title: 'Django Photo Gallery',\n    liveUrl: 'https://louie-gallery.herokuapp.com/',\n    repo: 'https://github.com/dizzyjaguar/Louie-Moskowitz-Photo-Gallery',\n    technology: 'Python, Django, Postgresql',\n    description: 'A photographers photo-gallery built with Django. Upload images available through the Admin panel. E-commerce Print store is next on this project.',\n    extra: '',\n  },\n  {\n    title: 'Goals App',\n    liveUrl: 'no live url yet',\n    repo: 'https://github.com/dizzyjaguar/goals-frontend/tree/dev',\n    technology: 'MongoDB, Express.js, React, Node.js',\n    description: 'An in-progress MERN stack app. Working on becoming a collaberative goal tracker.',\n    extra: ' *Backend Repo:  https://github.com/dizzyjaguar/goals-backend/tree/dev *This is in progress, so no live URL yet.',\n  }\n];\n\nexport default projectsData;","import React, { Component } from 'react'\nimport ProjectItem from '../components/ProjectItem/ProjectItem.js'\nimport projectsData from '../data/projectsData.js'\n\n\nconst Projects = () => {\n  const projectNodes = projectsData.map(project => {\n    return <ProjectItem {...project}\n    // title={title}\n    // liveUrl={liveUrl}\n    // repo={repo}\n    // technology={technology}\n    // description={description}\n    // extra={extra}\n    />\n  });\n  \n  \n  return (\n    <div className='Projects'>\n      {projectNodes}\n    </div>\n  )\n}\n\nexport default Projects;\n\n// export default class Projects extends Component {\n\n\n//   render() {\n//     return (\n//       <div className='Projects'>\n//         <ProjectItem />\n//         <ProjectItem />\n//       </div>\n//     )\n//   }\n// }\n","import React, { Component } from 'react'\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <div className='Footer'>\n        <p>\n          Email: dizzyjaguar@gmail.com\n        </p>\n        <a href='https://github.com/dizzyjaguar'>Github </a>\n        <a href='https://www.linkedin.com/in/eli-zevin/'>LinkedIn </a>\n        <a href='https://www.instagram.com/eli.zevin'>Instagram </a>  \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Header from '../Header/Header.js'\nimport About from './../About/About'\nimport Projects from '../../containers/Projects.js'\nimport Footer from '../Footer/Footer.js'\nimport './App.css';\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Header> This it the Header</Header>\n        <About>This is about me</About>\n        <Projects>This is my projects</Projects>\n        <Footer>This is the footer</Footer>\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}